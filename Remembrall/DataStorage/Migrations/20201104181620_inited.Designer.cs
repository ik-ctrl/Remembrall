// <auto-generated />
using DataStorage.Source;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataStorage.Migrations
{
    [DbContext(typeof(RemembrallContext))]
    [Migration("20201104181620_inited")]
    partial class inited
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataStorage.Source.Entity.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("EmailId");

                    b.HasIndex("PersonId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("DataStorage.Source.Entity.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DataStorage.Source.Entity.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DataStorage.Source.Entity.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneId");

                    b.HasIndex("PersonId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("DataStorage.Source.Entity.SpecialDate", b =>
                {
                    b.Property<int>("SpecialDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("SpecialDateId");

                    b.ToTable("SpecialDates");

                    b.HasData(
                        new
                        {
                            SpecialDateId = 1,
                            Day = 1,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 2,
                            Day = 2,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 3,
                            Day = 3,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 4,
                            Day = 4,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 5,
                            Day = 5,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 6,
                            Day = 6,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 7,
                            Day = 7,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 8,
                            Day = 8,
                            Description = "Новогодние выходные",
                            Month = 1
                        },
                        new
                        {
                            SpecialDateId = 9,
                            Day = 14,
                            Description = "День всех влюбленных",
                            Month = 2
                        },
                        new
                        {
                            SpecialDateId = 10,
                            Day = 23,
                            Description = "День защитника отечества",
                            Month = 2
                        },
                        new
                        {
                            SpecialDateId = 11,
                            Day = 8,
                            Description = "праздник женщин",
                            Month = 3
                        },
                        new
                        {
                            SpecialDateId = 12,
                            Day = 1,
                            Description = "Мир, труд, май!!!",
                            Month = 5
                        },
                        new
                        {
                            SpecialDateId = 13,
                            Day = 3,
                            Description = "Мир, труд, май!!!",
                            Month = 5
                        },
                        new
                        {
                            SpecialDateId = 14,
                            Day = 9,
                            Description = "День Победы",
                            Month = 5
                        },
                        new
                        {
                            SpecialDateId = 15,
                            Day = 12,
                            Description = "День независимости",
                            Month = 6
                        },
                        new
                        {
                            SpecialDateId = 16,
                            Day = 1,
                            Description = "День знаний",
                            Month = 9
                        },
                        new
                        {
                            SpecialDateId = 17,
                            Day = 4,
                            Description = "День народного единства",
                            Month = 11
                        },
                        new
                        {
                            SpecialDateId = 18,
                            Day = 31,
                            Description = "Новый год! С праздником!!!",
                            Month = 12
                        });
                });

            modelBuilder.Entity("DataStorage.Source.Entity.Email", b =>
                {
                    b.HasOne("DataStorage.Source.Entity.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataStorage.Source.Entity.Phone", b =>
                {
                    b.HasOne("DataStorage.Source.Entity.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
